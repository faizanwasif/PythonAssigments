============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:1: in <module>
    width = int(input(""))     ### YOUR CODE FOR calculateArea() FUNCTION GOES HERE ###
../../../anaconda3/lib/python3.8/site-packages/_pytest/capture.py:732: in read
    raise IOError(
E   OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.
=========================== short test summary info ============================
ERROR test_student.py - OSError: pytest: reading from stdin while output is c...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.16s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:1: in <module>
    width = int(input(""))     ### YOUR CODE FOR calculateArea() FUNCTION GOES HERE ###
../../../anaconda3/lib/python3.8/site-packages/_pytest/capture.py:732: in read
    raise IOError(
E   OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.
=========================== short test summary info ============================
ERROR test_student.py - OSError: pytest: reading from stdin while output is c...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:37: in <module>
    print(checkTilesFit())
a02.py:17: in checkTilesFit
    plot_length = int(input(""))
../../../anaconda3/lib/python3.8/site-packages/_pytest/capture.py:732: in read
    raise IOError(
E   OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.
=========================== short test summary info ============================
ERROR test_student.py - OSError: pytest: reading from stdin while output is c...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:59: in <module>
    print(calculateTiles())
a02.py:45: in calculateTiles
    plot_length = int(input(""))
../../../anaconda3/lib/python3.8/site-packages/_pytest/capture.py:732: in read
    raise IOError(
E   OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.
=========================== short test summary info ============================
ERROR test_student.py - OSError: pytest: reading from stdin while output is c...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:59: in <module>
    print(calculateTiles())
a02.py:45: in calculateTiles
    plot_length = int(input())
../../../anaconda3/lib/python3.8/site-packages/_pytest/capture.py:732: in read
    raise IOError(
E   OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.
=========================== short test summary info ============================
ERROR test_student.py - OSError: pytest: reading from stdin while output is c...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.18s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:59: in <module>
    print(calculateTiles())
a02.py:45: in calculateTiles
    plot_length = int(input())
../../../anaconda3/lib/python3.8/site-packages/_pytest/capture.py:732: in read
    raise IOError(
E   OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.
=========================== short test summary info ============================
ERROR test_student.py - OSError: pytest: reading from stdin while output is c...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 3
E       width =
E              ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.23s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 3
E       width =
E              ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:57: in <module>
    print(calculateTiles())
a02.py:43: in calculateTiles
    plot_length = int(input())
../../../anaconda3/lib/python3.8/site-packages/_pytest/capture.py:732: in read
    raise IOError(
E   OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.
=========================== short test summary info ============================
ERROR test_student.py - OSError: pytest: reading from stdin while output is c...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.11s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:6: in <module>
    calculateArea(width , length)
E   NameError: name 'width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:6: in <module>
    calculateArea(width , length)
E   NameError: name 'width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.12s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:55: in <module>
    print(calculateTiles())
a02.py:41: in calculateTiles
    plot_length = int(input())
../../../anaconda3/lib/python3.8/site-packages/_pytest/capture.py:732: in read
    raise IOError(
E   OSError: pytest: reading from stdin while output is captured!  Consider using `-s`.
=========================== short test summary info ============================
ERROR test_student.py - OSError: pytest: reading from stdin while output is c...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 11
E       def checkTilesFit(plot_length,plot_width ,tile_length,tile_width,tile_width):    ### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
E       ^
E   SyntaxError: duplicate argument 'tile_width' in function definition
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.14s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 29
E       def checkTilesFit():
E                          ^
E   IndentationError: unindent does not match any outer indentation level
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.14s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 29
E       def checkTilesFit():
E                          ^
E   IndentationError: unindent does not match any outer indentation level
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.14s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 11
E       def checkTilesFit(plot_length, plot_width ,tile_length,tile_width,tile_width):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
E       ^
E   SyntaxError: duplicate argument 'tile_width' in function definition
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:88: in <module>
    calculateTiles()
E   TypeError: calculateTiles() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_wdith', and 'tile_length'
=========================== short test summary info ============================
ERROR test_student.py - TypeError: calculateTiles() missing 4 required positi...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:88: in <module>
    calculateTiles(plot_width, plot_length, tile_wdith, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 30
E       def calculateTiles(checkTilesFit(plot_width, plot_length, tile_wdith, tile_length)):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
E                                       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 33
E       global plot_width
E       ^
E   SyntaxError: name 'plot_width' is parameter and global
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:90: in <module>
    calculateTiles(plot_width, plot_length, tile_wdith, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:90: in <module>
    calculateTiles(plot_width, plot_length, tile_wdith, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:90: in <module>
    calculateTiles(plot_width, plot_length, tile_wdith, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:90: in <module>
    calculateTiles(plot_width, plot_length, tile_wdith, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:90: in <module>
    calculateTiles(plot_width, plot_length, tile_wdith, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:90: in <module>
    calculateTiles(plot_width, plot_length, tile_width, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:90: in <module>
    calculateTiles(plot_width, plot_length, tile_width, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:90: in <module>
    calculateTiles(plot_width, plot_length, tile_width, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:89: in <module>
    calculateTiles(plot_width, plot_length, tile_width, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 26
E       checkTilesFit(plot_length, plot_width ,tile_length,tile_width)
E                                                                       ^
E   IndentationError: unindent does not match any outer indentation level
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:26: in <module>
    checkTilesFit(plot_length, plot_width ,tile_length,tile_width)
E   NameError: name 'plot_length' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_length' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:26: in <module>
    checkTilesFit(plot_length, plot_width ,tile_length,tile_width)
E   NameError: name 'plot_length' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_length' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:26: in <module>
    checkTilesFit(plot_width, plot_length, tile_width, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.08s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:26: in <module>
    checkTilesFit(plot_width, plot_length, tile_width, tile_length)  #### End OF MARKER
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:26: in <module>
    checkTilesFit(plot_width, plot_length, tile_width, tile_length)
E   NameError: name 'plot_width' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'plot_width' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py FFFFFFFFFFFFFFFF..F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_calculateArea_1 _____________________________

    def test_calculateArea_1():
>       assert calculateArea(4, 5) == 20
E       TypeError: calculateArea() takes 0 positional arguments but 2 were given

test_student.py:6: TypeError
_____________________________ test_calculateArea_2 _____________________________

    def test_calculateArea_2():
>       assert calculateArea(2, 0) == 0
E       TypeError: calculateArea() takes 0 positional arguments but 2 were given

test_student.py:9: TypeError
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None

test_student.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 0, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None

test_student.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 1, tile_width = 2, tile_length = 3

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if (plot_length.isalpha()):
    
                return x
    
        elif plot_length == "0":
    
            return None
    
    
>       if (plot_width.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:42: AttributeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6

test_student.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6

test_student.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1

test_student.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 12, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"

test_student.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 3, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateArea_1 - TypeError: calculateArea() tak...
FAILED test_student.py::test_calculateArea_2 - TypeError: calculateArea() tak...
FAILED test_student.py::test_calculateTiles_zero_check_1 - AttributeError: 'i...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AttributeError: 'i...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AttributeError: 'i...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AttributeError: 'i...
FAILED test_student.py::test_calculateTiles_zero_check_all - AttributeError: ...
FAILED test_student.py::test_calculateTiles_str_check_1 - AttributeError: 'in...
FAILED test_student.py::test_calculateTiles_str_check_2 - AttributeError: 'in...
FAILED test_student.py::test_calculateTiles_str_check_3 - AttributeError: 'in...
FAILED test_student.py::test_calculateTiles_str_check_4 - AttributeError: 'in...
FAILED test_student.py::test_calculateTiles_str_check_all - AttributeError: '...
FAILED test_student.py::test_calculateTiles_1 - AttributeError: 'int' object ...
FAILED test_student.py::test_calculateTiles_2 - AttributeError: 'int' object ...
FAILED test_student.py::test_calculateTiles_3 - AttributeError: 'int' object ...
FAILED test_student.py::test_calculateTiles_4 - AttributeError: 'int' object ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 17 failed, 3 passed in 0.12s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFFFFFF..F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None

test_student.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 0, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None

test_student.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 1, tile_width = 2, tile_length = 3

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if (plot_length.isalpha()):
    
                return x
    
        elif plot_length == "0":
    
            return None
    
    
>       if (plot_width.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:42: AttributeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6

test_student.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6

test_student.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1

test_student.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 12, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"

test_student.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 3, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
>       if (plot_length.isalpha()):
E       AttributeError: 'int' object has no attribute 'isalpha'

a02.py:33: AttributeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AttributeError: 'i...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AttributeError: 'i...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AttributeError: 'i...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AttributeError: 'i...
FAILED test_student.py::test_calculateTiles_zero_check_all - AttributeError: ...
FAILED test_student.py::test_calculateTiles_str_check_1 - AttributeError: 'in...
FAILED test_student.py::test_calculateTiles_str_check_2 - AttributeError: 'in...
FAILED test_student.py::test_calculateTiles_str_check_3 - AttributeError: 'in...
FAILED test_student.py::test_calculateTiles_str_check_4 - AttributeError: 'in...
FAILED test_student.py::test_calculateTiles_str_check_all - AttributeError: '...
FAILED test_student.py::test_calculateTiles_1 - AttributeError: 'int' object ...
FAILED test_student.py::test_calculateTiles_2 - AttributeError: 'int' object ...
FAILED test_student.py::test_calculateTiles_3 - AttributeError: 'int' object ...
FAILED test_student.py::test_calculateTiles_4 - AttributeError: 'int' object ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 15 failed, 5 passed in 0.10s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFFFFFF..F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None

test_student.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 0, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None

test_student.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 1, tile_width = 2, tile_length = 3

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6

test_student.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6

test_student.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1

test_student.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 12, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"

test_student.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 3, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        if type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        if type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        if type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - TypeError: checkTi...
FAILED test_student.py::test_calculateTiles_zero_check_2 - TypeError: checkTi...
FAILED test_student.py::test_calculateTiles_zero_check_3 - TypeError: checkTi...
FAILED test_student.py::test_calculateTiles_zero_check_4 - TypeError: checkTi...
FAILED test_student.py::test_calculateTiles_zero_check_all - TypeError: check...
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: ass...
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: ass...
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: ass...
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: ass...
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: a...
FAILED test_student.py::test_calculateTiles_1 - TypeError: checkTilesFit() mi...
FAILED test_student.py::test_calculateTiles_2 - TypeError: checkTilesFit() mi...
FAILED test_student.py::test_calculateTiles_3 - TypeError: checkTilesFit() mi...
FAILED test_student.py::test_calculateTiles_4 - TypeError: checkTilesFit() mi...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 15 failed, 5 passed in 0.12s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFFFFFF..F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None

test_student.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 0, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None

test_student.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 1, tile_width = 2, tile_length = 3

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6

test_student.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6

test_student.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1

test_student.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 12, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"

test_student.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 3, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
>       if checkTilesFit() == True:
E       TypeError: checkTilesFit() missing 4 required positional arguments: 'plot_width', 'plot_length', 'tile_width', and 'tile_length'

a02.py:76: TypeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - TypeError: checkTi...
FAILED test_student.py::test_calculateTiles_zero_check_2 - TypeError: checkTi...
FAILED test_student.py::test_calculateTiles_zero_check_3 - TypeError: checkTi...
FAILED test_student.py::test_calculateTiles_zero_check_4 - TypeError: checkTi...
FAILED test_student.py::test_calculateTiles_zero_check_all - TypeError: check...
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: ass...
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: ass...
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: ass...
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: ass...
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: a...
FAILED test_student.py::test_calculateTiles_1 - TypeError: checkTilesFit() mi...
FAILED test_student.py::test_calculateTiles_2 - TypeError: checkTilesFit() mi...
FAILED test_student.py::test_calculateTiles_3 - TypeError: checkTilesFit() mi...
FAILED test_student.py::test_calculateTiles_4 - TypeError: checkTilesFit() mi...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 15 failed, 5 passed in 0.10s =========================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = tile_length * tile_width
    
        plot_area = plot_length * plot_width
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = tile_length * tile_width
    
        plot_area = plot_length * plot_width
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = tile_length * tile_width
    
        plot_area = plot_length * plot_width
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"

test_student.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 3, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
    
            return math.ceil(plot_area / tile_area)
        else:
>           return Not_possible  #### End OF MARKER
E           NameError: name 'Not_possible' is not defined

a02.py:80: NameError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - NameError: name 'Not_possible' is not defined
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.11s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = tile_length * tile_width
    
        plot_area = plot_length * plot_width
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = tile_length * tile_width
    
        plot_area = plot_length * plot_width
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = tile_length * tile_width
    
        plot_area = plot_length * plot_width
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.10s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.08s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFFFF.FF..F                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def calculateTiles(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        x = "invalid input"
    
        import math
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
        tile_area = int(tile_length) * int(tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
    
>           return math.ceil(plot_area / tile_area)
E           ZeroDivisionError: division by zero

a02.py:78: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_1 ____________________________________________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not_possible' == 6
E        +  where 'Not_possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
___________________________________________________________ test_calculateTiles_2 ____________________________________________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not_possible' == 6
E        +  where 'Not_possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_1 ____________________________________________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
____________________________________________________________ test_checkTilesFit_4 ____________________________________________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: division by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not_possible' == 6
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not_possible' == 6
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
======================================================== 15 failed, 5 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F.FF.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_2 ____________________________________________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert None == False
E        +  where None = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_2 - assert None == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 13 failed, 7 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:76: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
>       if plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:17: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.11s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:79: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        if plot_area  == 0:
            return None
    
>       if plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:20: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:79: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        if plot_area  == 0:
            return None
    
>       if plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:20: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.11s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:79: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        if plot_area  == 0:
            return None
    
>       elif plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:20: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:79: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        if plot_area  == 0:
            return None
    
>       elif plot_area % tile_area  == 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:20: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Not_possible' == None
E        +  where 'Not_possible' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: assert 'Not_possible' == None
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.10s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================================== ERRORS ===================================================================
______________________________________________________ ERROR collecting test_student.py ______________________________________________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:26: in <module>
    tile_area = int(tile_length) * int(tile_width)### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
E   NameError: name 'tile_length' is not defined
========================================================== short test summary info ===========================================================
ERROR test_student.py - NameError: name 'tile_length' is not defined
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================================== 1 error in 0.06s ==============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================================== ERRORS ===================================================================
______________________________________________________ ERROR collecting test_student.py ______________________________________________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:26: in <module>
    tile_area = int(tile_length) * int(tile_width)### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
E   NameError: name 'tile_length' is not defined
========================================================== short test summary info ===========================================================
ERROR test_student.py - NameError: name 'tile_length' is not defined
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================================== 1 error in 0.06s ==============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not_possible' == 'Not Possible'
E         - Not Possible
E         ?    ^^
E         + Not_possible
E         ?    ^^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not_possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.11s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF...F..F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Not possible' == 'Not Possible'
E         - Not Possible
E         ?     ^
E         + Not possible
E         ?     ^

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Not possible' == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 12 failed, 8 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF......F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid input' == 'Invalid Input'
E         - Invalid Input
E         ? ^       ^
E         + invalid input
E         ? ^       ^

test_student.py:40: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid input' == 'Invalid Input'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 11 failed, 9 passed in 0.08s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFF......F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'invalid Input' == 'Invalid Input'
E         - Invalid Input
E         ? ^
E         + invalid Input
E         ? ^

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'invalid Input' == 'Invalid Input'
E         - Invalid Input
E         ? ^
E         + invalid Input
E         ? ^

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid Input' == 'Invalid Input'
E         - Invalid Input
E         ? ^
E         + invalid Input
E         ? ^

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid Input' == 'Invalid Input'
E         - Invalid Input
E         ? ^
E         + invalid Input
E         ? ^

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'invalid Input' == 'Invalid Input'
E         - Invalid Input
E         ? ^
E         + invalid Input
E         ? ^

test_student.py:40: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'invalid Input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'invalid Input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'invalid Input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'invalid Input' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'invalid Input' == 'Invalid Input'
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 11 failed, 9 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 6 failed, 14 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================================== ERRORS ===================================================================
______________________________________________________ ERROR collecting test_student.py ______________________________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 27
E       def calculateTiles(plot_width, plot_length, tile_width > 0, tile_length > 0):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
E                                                              ^
E   SyntaxError: invalid syntax
========================================================== short test summary info ===========================================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================================== 1 error in 0.14s ==============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================================== ERRORS ===================================================================
______________________________________________________ ERROR collecting test_student.py ______________________________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 22
E       else:
E       ^
E   SyntaxError: invalid syntax
========================================================== short test summary info ===========================================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================================== 1 error in 0.19s ==============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF.....FFF.FFFF                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
___________________________________________________________ test_calculateTiles_1 ____________________________________________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
___________________________________________________________ test_calculateTiles_2 ____________________________________________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
___________________________________________________________ test_calculateTiles_3 ____________________________________________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
____________________________________________________________ test_checkTilesFit_1 ____________________________________________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert 12 == True
E        +  where 12 = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
____________________________________________________________ test_checkTilesFit_2 ____________________________________________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert 9 == False
E        +  where 9 = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert 12 == False
E        +  where 12 = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
____________________________________________________________ test_checkTilesFit_4 ____________________________________________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert 15 == True
E        +  where 15 = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not Possible' == 6
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not Possible' == 6
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not Possible' == 1
FAILED test_student.py::test_checkTilesFit_1 - assert 12 == True
FAILED test_student.py::test_checkTilesFit_2 - assert 9 == False
FAILED test_student.py::test_checkTilesFit_3 - assert 12 == False
FAILED test_student.py::test_checkTilesFit_4 - assert 15 == True
======================================================== 12 failed, 8 passed in 0.17s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================================== ERRORS ===================================================================
______________________________________________________ ERROR collecting test_student.py ______________________________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 24
E       elif y = "0":
E              ^
E   SyntaxError: invalid syntax
========================================================== short test summary info ===========================================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================================== 1 error in 0.16s ==============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF.....FFFFFFFF                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None

test_student.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 0, tile_width = 1, tile_length = 2

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None

test_student.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 1, tile_width = 2, tile_length = 3

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
___________________________________________________________ test_calculateTiles_1 ____________________________________________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6

test_student.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 1, tile_length = 2

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
___________________________________________________________ test_calculateTiles_2 ____________________________________________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6

test_student.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
___________________________________________________________ test_calculateTiles_3 ____________________________________________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1

test_student.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 12, tile_length = 1

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"

test_student.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:92: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 3, plot_length = 3, tile_width = 2, tile_length = 1

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
____________________________________________________________ test_checkTilesFit_1 ____________________________________________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True

test_student.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
____________________________________________________________ test_checkTilesFit_2 ____________________________________________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False

test_student.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 3, plot_length = 3, tile_width = 2, tile_length = 1

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False

test_student.py:63: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 2

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
____________________________________________________________ test_checkTilesFit_4 ____________________________________________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True

test_student.py:66: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 5, plot_length = 3, tile_width = 3, tile_length = 1

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        y = tile_length
        z = tile_width
    
>       if y > "0":
E       TypeError: '>' not supported between instances of 'int' and 'str'

a02.py:20: TypeError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_calculateTiles_zero_check_2 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_calculateTiles_zero_check_3 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_calculateTiles_zero_check_4 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_calculateTiles_zero_check_all - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_calculateTiles_1 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_calculateTiles_2 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_calculateTiles_3 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_calculateTiles_4 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_checkTilesFit_1 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_checkTilesFit_2 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_checkTilesFit_3 - TypeError: '>' not supported between instances of 'int' and 'str'
FAILED test_student.py::test_checkTilesFit_4 - TypeError: '>' not supported between instances of 'int' and 'str'
======================================================== 13 failed, 7 passed in 0.15s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF.....F..F.FF.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
___________________________________________________________ test_calculateTiles_1 ____________________________________________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 5 == 'Not Possible'
E        +  where 5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
____________________________________________________________ test_checkTilesFit_2 ____________________________________________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert 1 == False
E        +  where 1 = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert 2 == False
E        +  where 2 = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: assert 'Not Possible' == None
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not Possible' == 6
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 5 == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_2 - assert 1 == False
FAILED test_student.py::test_checkTilesFit_3 - assert 2 == False
======================================================== 9 failed, 11 passed in 0.10s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================================== ERRORS ===================================================================
______________________________________________________ ERROR collecting test_student.py ______________________________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 21
E       elif (plot_area % tile_area)== 0:
E       ^
E   SyntaxError: invalid syntax
========================================================== short test summary info ===========================================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================================== 1 error in 0.17s ==============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:80: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:21: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:80: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:21: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:80: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) *int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
    
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:21: ZeroDivisionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 6 failed, 14 passed in 0.07s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFFFFFFFFFF...F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:70: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
        x = "Invalid Input"
    
        tile_area = int(tile_length) * int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
    
    
    
>       elif (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:58: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:70: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
        x = "Invalid Input"
    
        tile_area = int(tile_length) * int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
    
    
    
>       elif (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:58: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None

test_student.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 0, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
    
>           return math.ceil(plot_area / tile_area)
E           NameError: name 'math' is not defined

a02.py:72: NameError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None

test_student.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 1, tile_width = 2, tile_length = 3

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
    
>           return math.ceil(plot_area / tile_area)
E           NameError: name 'math' is not defined

a02.py:72: NameError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:70: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
        x = "Invalid Input"
    
        tile_area = int(tile_length) * int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
        if type(plot_width)== str:
    
                return x
    
        elif plot_width == "0":
    
            return None
    
    
        elif type(plot_length) == str:
    
            return x
    
        elif plot_length == "0":
    
            return None
    
    
    
        elif type(tile_width) == str:
    
            return x
    
        elif tile_width == "0":
    
            return None
    
    
    
        elif type(tile_length) == str:
    
            return x
    
        elif tile_length == "0":
    
            return None
    
    
    
    
>       elif (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:58: ZeroDivisionError
______________________________________________________ test_calculateTiles_str_check_1 _______________________________________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"
E       AssertionError: assert 'Not Possible' == 'Invalid Input'
E         - Invalid Input
E         + Not Possible

test_student.py:28: AssertionError
______________________________________________________ test_calculateTiles_str_check_2 _______________________________________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"
E       AssertionError: assert 'Not Possible' == 'Invalid Input'
E         - Invalid Input
E         + Not Possible

test_student.py:31: AssertionError
______________________________________________________ test_calculateTiles_str_check_3 _______________________________________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"
E       AssertionError: assert 'Not Possible' == 'Invalid Input'
E         - Invalid Input
E         + Not Possible

test_student.py:34: AssertionError
______________________________________________________ test_calculateTiles_str_check_4 _______________________________________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'Not Possible' == 'Invalid Input'
E         - Invalid Input
E         + Not Possible

test_student.py:37: AssertionError
_____________________________________________________ test_calculateTiles_str_check_all ______________________________________________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"
E       AssertionError: assert 'Not Possible' == 'Invalid Input'
E         - Invalid Input
E         + Not Possible

test_student.py:40: AssertionError
___________________________________________________________ test_calculateTiles_1 ____________________________________________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6

test_student.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
    
>           return math.ceil(plot_area / tile_area)
E           NameError: name 'math' is not defined

a02.py:72: NameError
___________________________________________________________ test_calculateTiles_2 ____________________________________________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6

test_student.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
    
>           return math.ceil(plot_area / tile_area)
E           NameError: name 'math' is not defined

a02.py:72: NameError
___________________________________________________________ test_calculateTiles_3 ____________________________________________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1

test_student.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 12, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
    
>           return math.ceil(plot_area / tile_area)
E           NameError: name 'math' is not defined

a02.py:72: NameError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - NameError: name 'math' is not defined
FAILED test_student.py::test_calculateTiles_zero_check_4 - NameError: name 'math' is not defined
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_str_check_1 - AssertionError: assert 'Not Possible' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_2 - AssertionError: assert 'Not Possible' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_3 - AssertionError: assert 'Not Possible' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_4 - AssertionError: assert 'Not Possible' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_str_check_all - AssertionError: assert 'Not Possible' == 'Invalid Input'
FAILED test_student.py::test_calculateTiles_1 - NameError: name 'math' is not defined
FAILED test_student.py::test_calculateTiles_2 - NameError: name 'math' is not defined
FAILED test_student.py::test_calculateTiles_3 - NameError: name 'math' is not defined
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 14 failed, 6 passed in 0.14s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF...........F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) * int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) * int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:77: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = int(tile_length) * int( tile_width)
    
        plot_area = int(plot_length) * int(plot_width)
    
    
>       if (plot_area % tile_area)== 0:
E       ZeroDivisionError: integer division or modulo by zero

a02.py:18: ZeroDivisionError
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionError: integer division or modulo by zero
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 6 failed, 14 passed in 0.07s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 1 failed, 19 passed in 0.08s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 1 failed, 19 passed in 0.06s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================================== ERRORS ===================================================================
______________________________________________________ ERROR collecting test_student.py ______________________________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 53
E       elif type(tile_width) == str:
E       ^
E   SyntaxError: invalid syntax
========================================================== short test summary info ===========================================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================================== 1 error in 0.13s ==============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 1 failed, 19 passed in 0.06s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 1 failed, 19 passed in 0.06s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 1 failed, 19 passed in 0.08s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================================== ERRORS ===================================================================
______________________________________________________ ERROR collecting test_student.py ______________________________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 23
E       elif type(x) = float
E                    ^
E   SyntaxError: invalid syntax
========================================================== short test summary info ===========================================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================================== 1 error in 0.13s ==============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                                                   [100%]

================================================================== FAILURES ==================================================================
____________________________________________________________ test_checkTilesFit_3 ____________________________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================================== 1 failed, 19 passed in 0.06s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                                                                                   [100%]

============================================================= 20 passed in 0.04s =============================================================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:8: in <module>
    tile_area = int(tile_length) * int(tile_width)
E   NameError: name 'tile_length' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'tile_length' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.24s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.15s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py FF................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_calculateArea_1 _____________________________

    def test_calculateArea_1():
>       assert calculateArea(4, 5) == 20

test_student.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

width = 4, length = 5

    def calculateArea(width,length):### YOUR CODE FOR calculateArea() FUNCTION GOES HERE ###
    
    
    
>       return area     #### End OF MARKER
E       NameError: name 'area' is not defined

a02.py:5: NameError
_____________________________ test_calculateArea_2 _____________________________

    def test_calculateArea_2():
>       assert calculateArea(2, 0) == 0

test_student.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

width = 2, length = 0

    def calculateArea(width,length):### YOUR CODE FOR calculateArea() FUNCTION GOES HERE ###
    
    
    
>       return area     #### End OF MARKER
E       NameError: name 'area' is not defined

a02.py:5: NameError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateArea_1 - NameError: name 'area' is not ...
FAILED test_student.py::test_calculateArea_2 - NameError: name 'area' is not ...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FFF.FFFF                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       AssertionError: assert 'True' == True
E        +  where 'True' = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       AssertionError: assert 'False' == False
E        +  where 'False' = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       AssertionError: assert 'True' == False
E        +  where 'True' = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       AssertionError: assert 'True' == True
E        +  where 'True' = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - AssertionError: assert 'True' ...
FAILED test_student.py::test_checkTilesFit_2 - AssertionError: assert 'False'...
FAILED test_student.py::test_checkTilesFit_3 - AssertionError: assert 'True' ...
FAILED test_student.py::test_checkTilesFit_4 - AssertionError: assert 'True' ...
========================= 7 failed, 13 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.05s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py .............FF.F.FF                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert None == True
E        +  where None = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert None == True
E        +  where None = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - assert None == True
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
FAILED test_student.py::test_checkTilesFit_4 - assert None == True
========================= 5 failed, 15 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.12s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 80
E       elif (plot_width % tile_width) > 0 and (plot_length %  tile_length) > 0:
E                                                                                ^
E   IndentationError: unindent does not match any outer indentation level
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.18s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.FF..F.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       assert None == 6
E        +  where None = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       assert None == 1
E        +  where None = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert None == 'Not Possible'
E        +  where None = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - assert None == 6
FAILED test_student.py::test_calculateTiles_3 - assert None == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert None =...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 4 failed, 16 passed in 0.07s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.05s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================== ERRORS ===================================================
______________________________________ ERROR collecting test_student.py ______________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 28
E       elif (plot_width % tile_width) > 0 or (plot_length %  tile_length) > 0:
E       ^
E   IndentationError: expected an indented block
========================================== short test summary info ===========================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================== 1 error in 0.13s ==============================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================== ERRORS ===================================================
______________________________________ ERROR collecting test_student.py ______________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 28
E       elif (plot_width % tile_width) > 0 or (plot_length %  tile_length) > 0:
E                                                                              ^
E   IndentationError: unindent does not match any outer indentation level
========================================== short test summary info ===========================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================== 1 error in 0.13s ==============================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                                                   [100%]

================================================== FAILURES ==================================================
___________________________________________ test_calculateTiles_4 ____________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 5 == 'Not Possible'
E        +  where 5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
____________________________________________ test_checkTilesFit_2 ____________________________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
____________________________________________ test_checkTilesFit_3 ____________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================== short test summary info ===========================================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 5 == 'Not Possible'
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================== 3 failed, 17 passed in 0.09s ========================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.F..FFF                                                                   [100%]

================================================== FAILURES ==================================================
___________________________________________ test_calculateTiles_1 ____________________________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
___________________________________________ test_calculateTiles_3 ____________________________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
____________________________________________ test_checkTilesFit_2 ____________________________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert None == False
E        +  where None = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
____________________________________________ test_checkTilesFit_3 ____________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert None == False
E        +  where None = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
____________________________________________ test_checkTilesFit_4 ____________________________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert None == True
E        +  where None = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
========================================== short test summary info ===========================================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not Possible' == 6
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not Possible' == 1
FAILED test_student.py::test_checkTilesFit_2 - assert None == False
FAILED test_student.py::test_checkTilesFit_3 - assert None == False
FAILED test_student.py::test_checkTilesFit_4 - assert None == True
======================================== 5 failed, 15 passed in 0.09s ========================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================== ERRORS ===================================================
______________________________________ ERROR collecting test_student.py ______________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 17
E       elif (plot_width % tile_width) > 0 or (plot_length %  tile_length) > 0:
E       ^
E   SyntaxError: invalid syntax
========================================== short test summary info ===========================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================== 1 error in 0.13s ==============================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================== ERRORS ===================================================
______________________________________ ERROR collecting test_student.py ______________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 73
E       if checkTilesFit(plot_width, plot_length, tile_width, tile_length) == True:
E       ^
E   IndentationError: unexpected indent
========================================== short test summary info ===========================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================== 1 error in 0.13s ==============================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                   [100%]

================================================== FAILURES ==================================================
____________________________________________ test_checkTilesFit_3 ____________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================== short test summary info ===========================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================== 1 failed, 19 passed in 0.06s ========================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                   [100%]

================================================== FAILURES ==================================================
____________________________________________ test_checkTilesFit_3 ____________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================== short test summary info ===========================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================== 1 failed, 19 passed in 0.06s ========================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                                                   [100%]

============================================= 20 passed in 0.10s =============================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================== ERRORS ===================================================
______________________________________ ERROR collecting test_student.py ______________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 31
E       if  type(plot_width),type(plot_length) , type(tile_width), type(tile_length) == str , str ,str,str:
E                           ^
E   SyntaxError: invalid syntax
========================================== short test summary info ===========================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================== 1 error in 0.16s ==============================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================================== ERRORS ===================================================
______________________________________ ERROR collecting test_student.py ______________________________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 31
E       if  type(plot_width),(type(plot_length)) , (type(tile_width)), (type(tile_length)) == (str) , (str) ,(str),(str):
E                           ^
E   SyntaxError: invalid syntax
========================================== short test summary info ===========================================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
============================================== 1 error in 0.13s ==============================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                   [100%]

================================================== FAILURES ==================================================
____________________________________________ test_checkTilesFit_3 ____________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================== short test summary info ===========================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================== 1 failed, 19 passed in 0.09s ========================================
============================================ test session starts =============================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                                                   [100%]

================================================== FAILURES ==================================================
____________________________________________ test_checkTilesFit_3 ____________________________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
========================================== short test summary info ===========================================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================================== 1 failed, 19 passed in 0.11s ========================================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4.5 == 'Not Possible'
E        +  where 4.5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4.5 ==...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.18s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 20
E       if ((y or z) == 0 ) and ((a or b )== 0)
E                                             ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.34s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FFF.F..F                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 5 failed, 15 passed in 0.14s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.F..                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4.5 == 'Not Possible'
E        +  where 4.5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4.5 ==...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
========================= 2 failed, 18 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4.5 == 'Not Possible'
E        +  where 4.5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4.5 ==...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.F..                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4.5 == 'Not Possible'
E        +  where 4.5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4.5 ==...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
========================= 2 failed, 18 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4.5 == 'Not Possible'
E        +  where 4.5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4.5 ==...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4.5 == 'Not Possible'
E        +  where 4.5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4.5 ==...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..............F....F                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 2 failed, 18 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FFF.F..F                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 5 failed, 15 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..............F...F.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 2 failed, 18 passed in 0.18s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4.5 == 'Not Possible'
E        +  where 4.5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4.5 ==...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.F..                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4.5 == 'Not Possible'
E        +  where 4.5 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4.5 ==...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
========================= 2 failed, 18 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FF..F..F                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 4 failed, 16 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FFF.F..F                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 5 failed, 15 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..............F...F.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 2 failed, 18 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FFF.F..F                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 5 failed, 15 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.F.....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
========================= 2 failed, 18 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.F.....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
========================= 2 failed, 18 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 73
E       elif return int(plot_area / tile_area)
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.14s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 73
E       return int(plot_area / tile_area)
E       ^
E   IndentationError: unexpected indent
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4 == 'Not Possible'
E        +  where 4 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == '...
========================= 1 failed, 19 passed in 0.08s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.F.....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
========================= 2 failed, 18 passed in 0.05s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.F.....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
========================= 2 failed, 18 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.05s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....FF............F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 49
E       if plot_length == 0:
E                          ^
E   IndentationError: unindent does not match any outer indentation level
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.F.....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
========================= 2 failed, 18 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.F.....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
========================= 2 failed, 18 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.08s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4 == 'Not Possible'
E        +  where 4 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == '...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 21
E       if (y == 0 and a == 0) and (z == 0  and b == 0) and (y == 0 an z==0) and (a == 0 and b == 0) or (plot_area % tile_area == 0):
E                                                                   ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 21
E       if (y == 0 and a == 0) and (z == 0  and b == 0) and (y == 0 an z==0) and (a == 0 and b == 0) or (plot_area % tile_area == 0):
E                                                                   ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py .............FF.F..F                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 4 failed, 16 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 4 == 'Not Possible'
E        +  where 4 = calculateTiles(3, 3, 2, 1)

test_student.py:53: AssertionError
_____________________________ test_checkTilesFit_2 _____________________________

    def test_checkTilesFit_2():
>       assert checkTilesFit(3, 3, 2, 1) == False
E       assert True == False
E        +  where True = checkTilesFit(3, 3, 2, 1)

test_student.py:60: AssertionError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == '...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.05s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............F.F....F                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Not Possible' == 1
E        +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
_____________________________ test_checkTilesFit_4 _____________________________

    def test_checkTilesFit_4():
>       assert checkTilesFit(5, 3, 3, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(5, 3, 3, 1)

test_student.py:66: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_4 - assert False == True
========================= 3 failed, 17 passed in 0.06s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.07s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:80: in <module>
    tile_area = int(tile_length) * int(tile_width)
E   NameError: name 'tile_length' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'tile_length' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.07s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
test_student.py:1: in <module>
    from a02 import calculateArea
a02.py:80: in <module>
    tile_area = int(tile_length) * int(tile_width)
E   NameError: name 'tile_length' is not defined
=========================== short test summary info ============================
ERROR test_student.py - NameError: name 'tile_length' is not defined
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.06s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.08s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFF.FFFFF......F.                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:75: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
        #y = plot_length % tile_length
        #z = plot_width % tile_width
        #a = plot_width % tile_length
        #b = plot_width % tile_width
        #and (z == 0  and b == 0)
    
>       if (plot_area % tile_area == 0):
E       ZeroDivisionError: integer division or modulo by zero

a02.py:21: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:75: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
        #y = plot_length % tile_length
        #z = plot_width % tile_width
        #a = plot_width % tile_length
        #b = plot_width % tile_width
        #and (z == 0  and b == 0)
    
>       if (plot_area % tile_area == 0):
E       ZeroDivisionError: integer division or modulo by zero

a02.py:21: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_______________________ test_calculateTiles_str_check_1 ________________________

    def test_calculateTiles_str_check_1():
>       assert calculateTiles(2, 3, "4", 1) == "Invalid Input"

test_student.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:75: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = '4', tile_length = 1

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
        #y = plot_length % tile_length
        #z = plot_width % tile_width
        #a = plot_width % tile_length
        #b = plot_width % tile_width
        #and (z == 0  and b == 0)
    
>       if (plot_area % tile_area == 0):
E       TypeError: unsupported operand type(s) for %: 'int' and 'str'

a02.py:21: TypeError
_______________________ test_calculateTiles_str_check_2 ________________________

    def test_calculateTiles_str_check_2():
>       assert calculateTiles(2, 3, 1, "2") == "Invalid Input"

test_student.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:75: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 1, tile_length = '2'

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
        #y = plot_length % tile_length
        #z = plot_width % tile_width
        #a = plot_width % tile_length
        #b = plot_width % tile_width
        #and (z == 0  and b == 0)
    
>       if (plot_area % tile_area == 0):
E       TypeError: unsupported operand type(s) for %: 'int' and 'str'

a02.py:21: TypeError
_______________________ test_calculateTiles_str_check_3 ________________________

    def test_calculateTiles_str_check_3():
>       assert calculateTiles(2, "3", 1, 2) == "Invalid Input"

test_student.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:75: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = '3', tile_width = 1, tile_length = 2

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
        #y = plot_length % tile_length
        #z = plot_width % tile_width
        #a = plot_width % tile_length
        #b = plot_width % tile_width
        #and (z == 0  and b == 0)
    
>       if (plot_area % tile_area == 0):
E       TypeError: not all arguments converted during string formatting

a02.py:21: TypeError
_______________________ test_calculateTiles_str_check_4 ________________________

    def test_calculateTiles_str_check_4():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:37: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:75: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
        #y = plot_length % tile_length
        #z = plot_width % tile_width
        #a = plot_width % tile_length
        #b = plot_width % tile_width
        #and (z == 0  and b == 0)
    
>       if (plot_area % tile_area == 0):
E       TypeError: not all arguments converted during string formatting

a02.py:21: TypeError
______________________ test_calculateTiles_str_check_all _______________________

    def test_calculateTiles_str_check_all():
>       assert calculateTiles("2", 3, 1, 2) == "Invalid Input"

test_student.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:75: in calculateTiles
    if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = '2', plot_length = 3, tile_width = 1, tile_length = 2

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
        #y = plot_length % tile_length
        #z = plot_width % tile_width
        #a = plot_width % tile_length
        #b = plot_width % tile_width
        #and (z == 0  and b == 0)
    
>       if (plot_area % tile_area == 0):
E       TypeError: not all arguments converted during string formatting

a02.py:21: TypeError
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - assert 0 == None
FAILED test_student.py::test_calculateTiles_str_check_1 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_2 - TypeError: unsuppor...
FAILED test_student.py::test_calculateTiles_str_check_3 - TypeError: not all ...
FAILED test_student.py::test_calculateTiles_str_check_4 - TypeError: not all ...
FAILED test_student.py::test_calculateTiles_str_check_all - TypeError: not al...
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================== 10 failed, 10 passed in 0.08s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.08s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.14s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.03s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..................F.                                     [100%]

=================================== FAILURES ===================================
_____________________________ test_checkTilesFit_3 _____________________________

    def test_checkTilesFit_3():
>       assert checkTilesFit(4, 3, 2, 2) == False
E       assert True == False
E        +  where True = checkTilesFit(4, 3, 2, 2)

test_student.py:63: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
========================= 1 failed, 19 passed in 0.08s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.08s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.03s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF.............                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'None' == None
E        +  where 'None' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: ...
========================= 5 failed, 15 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.03s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.04s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.03s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF.............                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None

test_student.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:71: in calculateTiles
    elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 4, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
>       y = plot_length % tile_length
E       ZeroDivisionError: integer division or modulo by zero

a02.py:15: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None

test_student.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:71: in calculateTiles
    elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 2, plot_length = 3, tile_width = 0, tile_length = 4

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
        y = plot_length % tile_length
>       z = plot_width % tile_width
E       ZeroDivisionError: integer division or modulo by zero

a02.py:16: ZeroDivisionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       assert 0 == None
E        +  where 0 = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Not Possible' == None
E        +  where 'Not Possible' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None

test_student.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
a02.py:71: in calculateTiles
    elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 0, plot_length = 0, tile_width = 0, tile_length = 0

    def checkTilesFit(plot_width, plot_length, tile_width, tile_length):### YOUR CODE FOR checkTilesFit() FUNCTION GOES HERE ###
    
        tile_area = (tile_length) * (tile_width)
    
        plot_area = (plot_length) * (plot_width)
    
>       y = plot_length % tile_length
E       ZeroDivisionError: integer division or modulo by zero

a02.py:15: ZeroDivisionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_2 - ZeroDivisionError:...
FAILED test_student.py::test_calculateTiles_zero_check_3 - assert 0 == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - ZeroDivisionErro...
========================= 5 failed, 15 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.09s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FF..F...                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Not Possible' == 6
E        +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
_____________________________ test_checkTilesFit_1 _____________________________

    def test_checkTilesFit_1():
>       assert checkTilesFit(4, 3, 2, 1) == True
E       assert False == True
E        +  where False = checkTilesFit(4, 3, 2, 1)

test_student.py:57: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not P...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not P...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.05s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FFF.....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6

test_student.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
    
        if type(plot_width)== str:
    
            return "Invalid Input"
    
        elif plot_width == 0:
    
            return None
    
    
        elif type(plot_length) == str:
    
            return "Invalid Input"
    
        elif plot_length == 0:
    
            return None
    
        elif type(tile_width) == str:
    
            return "Invalid Input"
    
        elif tile_width == 0:
    
            return None
    
        elif type(tile_length) == str:
    
            return "Invalid Input"
    
        elif tile_length == 0:
    
            return None
    
    
        elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
    
>           return int(plot_area / tile_area)
E           UnboundLocalError: local variable 'plot_area' referenced before assignment

a02.py:74: UnboundLocalError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6

test_student.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
    
        if type(plot_width)== str:
    
            return "Invalid Input"
    
        elif plot_width == 0:
    
            return None
    
    
        elif type(plot_length) == str:
    
            return "Invalid Input"
    
        elif plot_length == 0:
    
            return None
    
        elif type(tile_width) == str:
    
            return "Invalid Input"
    
        elif tile_width == 0:
    
            return None
    
        elif type(tile_length) == str:
    
            return "Invalid Input"
    
        elif tile_length == 0:
    
            return None
    
    
        elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
    
>           return int(plot_area / tile_area)
E           UnboundLocalError: local variable 'plot_area' referenced before assignment

a02.py:74: UnboundLocalError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1

test_student.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 12, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
    
        if type(plot_width)== str:
    
            return "Invalid Input"
    
        elif plot_width == 0:
    
            return None
    
    
        elif type(plot_length) == str:
    
            return "Invalid Input"
    
        elif plot_length == 0:
    
            return None
    
        elif type(tile_width) == str:
    
            return "Invalid Input"
    
        elif tile_width == 0:
    
            return None
    
        elif type(tile_length) == str:
    
            return "Invalid Input"
    
        elif tile_length == 0:
    
            return None
    
    
        elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
    
>           return int(plot_area / tile_area)
E           UnboundLocalError: local variable 'plot_area' referenced before assignment

a02.py:74: UnboundLocalError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - UnboundLocalError: local vari...
FAILED test_student.py::test_calculateTiles_2 - UnboundLocalError: local vari...
FAILED test_student.py::test_calculateTiles_3 - UnboundLocalError: local vari...
========================= 3 failed, 17 passed in 0.09s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 74
E       elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.14s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 74
E       elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.14s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 73
E       elif checkTilesFit(plot_width, plot_length, tile_width, tile_length):
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.14s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF.....FFFF....                                     [100%]

=================================== FAILURES ===================================
_______________________ test_calculateTiles_zero_check_1 _______________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
_______________________ test_calculateTiles_zero_check_2 _______________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
_______________________ test_calculateTiles_zero_check_3 _______________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
_______________________ test_calculateTiles_zero_check_4 _______________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
______________________ test_calculateTiles_zero_check_all ______________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Invalid Input' == 6
E        +  where 'Invalid Input' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Invalid Input' == 6
E        +  where 'Invalid Input' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Invalid Input' == 1
E        +  where 'Invalid Input' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
____________________________ test_calculateTiles_4 _____________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Invalid Input' == 'Not Possible'
E         - Not Possible
E         + Invalid Input

test_student.py:53: AssertionError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: as...
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: ...
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Inval...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Inval...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Inval...
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Inval...
========================= 9 failed, 11 passed in 0.07s =========================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

==================================== ERRORS ====================================
_______________________ ERROR collecting test_student.py _______________________
../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
test_student.py:1: in <module>
    from a02 import calculateArea
E     File "/home/muhammad/Desktop/TA task2/assignment14(1)/a02.py", line 74
E       elif checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
E       ^
E   SyntaxError: invalid syntax
=========================== short test summary info ============================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                     [100%]

============================== 20 passed in 0.03s ==============================
============================= test session starts ==============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FFF.....                                     [100%]

=================================== FAILURES ===================================
____________________________ test_calculateTiles_1 _____________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6

test_student.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 1, tile_length = 2

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        import math
    
        if type(plot_width)== str:
    
            return "Invalid Input"
    
        elif (plot_width) == 0:
    
            return None
    
    
        elif type(plot_length) == str:
    
            return "Invalid Input"
    
        elif (plot_length) == 0:
    
            return None
    
        elif type(tile_width) == str:
    
            return "Invalid Input"
    
        elif (tile_width) == 0:
    
            return None
    
        elif type(tile_length) == str:
    
            return "Invalid Input"
    
        elif (tile_length) == 0:
    
            return None
    
    
        tile_area = calculateArea(tile_length , tile_width)
    
        plot_area = calculateArea(plot_length , plot_width)
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
    
>           return ceil(plot_area // tile_area)
E           NameError: name 'ceil' is not defined

a02.py:79: NameError
____________________________ test_calculateTiles_2 _____________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6

test_student.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 2, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        import math
    
        if type(plot_width)== str:
    
            return "Invalid Input"
    
        elif (plot_width) == 0:
    
            return None
    
    
        elif type(plot_length) == str:
    
            return "Invalid Input"
    
        elif (plot_length) == 0:
    
            return None
    
        elif type(tile_width) == str:
    
            return "Invalid Input"
    
        elif (tile_width) == 0:
    
            return None
    
        elif type(tile_length) == str:
    
            return "Invalid Input"
    
        elif (tile_length) == 0:
    
            return None
    
    
        tile_area = calculateArea(tile_length , tile_width)
    
        plot_area = calculateArea(plot_length , plot_width)
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
    
>           return ceil(plot_area // tile_area)
E           NameError: name 'ceil' is not defined

a02.py:79: NameError
____________________________ test_calculateTiles_3 _____________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1

test_student.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

plot_width = 4, plot_length = 3, tile_width = 12, tile_length = 1

    def calculateTiles(plot_width, plot_length, tile_width , tile_length):### YOUR CODE FOR calculateTiles() FUNCTION GOES HERE ###
    
    
        import math
    
        if type(plot_width)== str:
    
            return "Invalid Input"
    
        elif (plot_width) == 0:
    
            return None
    
    
        elif type(plot_length) == str:
    
            return "Invalid Input"
    
        elif (plot_length) == 0:
    
            return None
    
        elif type(tile_width) == str:
    
            return "Invalid Input"
    
        elif (tile_width) == 0:
    
            return None
    
        elif type(tile_length) == str:
    
            return "Invalid Input"
    
        elif (tile_length) == 0:
    
            return None
    
    
        tile_area = calculateArea(tile_length , tile_width)
    
        plot_area = calculateArea(plot_length , plot_width)
    
        if checkTilesFit(plot_width, plot_length, tile_width, tile_length) :
    
>           return ceil(plot_area // tile_area)
E           NameError: name 'ceil' is not defined

a02.py:79: NameError
=========================== short test summary info ============================
FAILED test_student.py::test_calculateTiles_1 - NameError: name 'ceil' is not...
FAILED test_student.py::test_calculateTiles_2 - NameError: name 'ceil' is not...
FAILED test_student.py::test_calculateTiles_3 - NameError: name 'ceil' is not...
========================= 3 failed, 17 passed in 0.09s =========================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                                                                                   [100%]

============================================================= 20 passed in 0.09s =============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                                                                                   [100%]

============================================================= 20 passed in 0.04s =============================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF.....FFFF....                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
___________________________________________________________ test_calculateTiles_1 ____________________________________________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Invalid Input' == 6
E        +  where 'Invalid Input' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
___________________________________________________________ test_calculateTiles_2 ____________________________________________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Invalid Input' == 6
E        +  where 'Invalid Input' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
___________________________________________________________ test_calculateTiles_3 ____________________________________________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Invalid Input' == 1
E        +  where 'Invalid Input' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Invalid Input' == 'Not Possible'
E         - Not Possible
E         + Invalid Input

test_student.py:53: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Invalid Input' == 6
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Invalid Input' == 6
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Invalid Input' == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Invalid Input' == 'Not Possible'
======================================================== 9 failed, 11 passed in 0.09s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..FFFFF.....FFFF....                                                                                                   [100%]

================================================================== FAILURES ==================================================================
______________________________________________________ test_calculateTiles_zero_check_1 ______________________________________________________

    def test_calculateTiles_zero_check_1():
>       assert calculateTiles(2, 3, 4, 0) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 3, 4, 0)

test_student.py:12: AssertionError
______________________________________________________ test_calculateTiles_zero_check_2 ______________________________________________________

    def test_calculateTiles_zero_check_2():
>       assert calculateTiles(2, 3, 0, 4) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 3, 0, 4)

test_student.py:15: AssertionError
______________________________________________________ test_calculateTiles_zero_check_3 ______________________________________________________

    def test_calculateTiles_zero_check_3():
>       assert calculateTiles(2, 0, 1, 2) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(2, 0, 1, 2)

test_student.py:18: AssertionError
______________________________________________________ test_calculateTiles_zero_check_4 ______________________________________________________

    def test_calculateTiles_zero_check_4():
>       assert calculateTiles(0, 1, 2, 3) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(0, 1, 2, 3)

test_student.py:21: AssertionError
_____________________________________________________ test_calculateTiles_zero_check_all _____________________________________________________

    def test_calculateTiles_zero_check_all():
>       assert calculateTiles(0, 0, 0, 0) == None
E       AssertionError: assert 'Invalid Input' == None
E        +  where 'Invalid Input' = calculateTiles(0, 0, 0, 0)

test_student.py:24: AssertionError
___________________________________________________________ test_calculateTiles_1 ____________________________________________________________

    def test_calculateTiles_1():
>       assert calculateTiles(4, 3, 1, 2) == 6
E       AssertionError: assert 'Invalid Input' == 6
E        +  where 'Invalid Input' = calculateTiles(4, 3, 1, 2)

test_student.py:43: AssertionError
___________________________________________________________ test_calculateTiles_2 ____________________________________________________________

    def test_calculateTiles_2():
>       assert calculateTiles(4, 3, 2, 1) == 6
E       AssertionError: assert 'Invalid Input' == 6
E        +  where 'Invalid Input' = calculateTiles(4, 3, 2, 1)

test_student.py:46: AssertionError
___________________________________________________________ test_calculateTiles_3 ____________________________________________________________

    def test_calculateTiles_3():
>       assert calculateTiles(4, 3, 12, 1) == 1
E       AssertionError: assert 'Invalid Input' == 1
E        +  where 'Invalid Input' = calculateTiles(4, 3, 12, 1)

test_student.py:50: AssertionError
___________________________________________________________ test_calculateTiles_4 ____________________________________________________________

    def test_calculateTiles_4():
>       assert calculateTiles(3, 3, 2, 1) == "Not Possible"
E       AssertionError: assert 'Invalid Input' == 'Not Possible'
E         - Not Possible
E         + Invalid Input

test_student.py:53: AssertionError
========================================================== short test summary info ===========================================================
FAILED test_student.py::test_calculateTiles_zero_check_1 - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_zero_check_2 - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_zero_check_3 - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_zero_check_4 - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_zero_check_all - AssertionError: assert 'Invalid Input' == None
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Invalid Input' == 6
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Invalid Input' == 6
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Invalid Input' == 1
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 'Invalid Input' == 'Not Possible'
======================================================== 9 failed, 11 passed in 0.07s ========================================================
============================================================ test session starts =============================================================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ....................                                                                                                   [100%]

============================================================= 20 passed in 0.09s =============================================================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 0 items / 1 error

=================================== ERRORS ====================================
______________________ ERROR collecting test_student.py _______________________
../../../../anaconda3/lib/python3.8/site-packages/_pytest/python.py:511: in _importtestmodule
    mod = self.fspath.pyimport(ensuresyspath=importmode)
../../../../anaconda3/lib/python3.8/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:991: in _find_and_load
    ???
<frozen importlib._bootstrap>:975: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:671: in _load_unlocked
    ???
../../../../anaconda3/lib/python3.8/site-packages/_pytest/assertion/rewrite.py:152: in exec_module
    exec(co, module.__dict__)
/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:1: in <module>
    ???
E     File "/home/muhammad/Desktop/My Files/TA task2/assignment14(1)/a02.py", line 43
E       elif (plot_width) == 0:
E                             ^
E   IndentationError: unindent does not match any outer indentation level
=========================== short test summary info ===========================
ERROR test_student.py
!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
============================== 1 error in 0.44s ===============================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ............FFF.F...                                    [100%]

================================== FAILURES ===================================
____________________________ test_calculateTiles_1 ____________________________

>   ???
E   AssertionError: assert 'Not Possible' == 6
E    +  where 'Not Possible' = calculateTiles(4, 3, 1, 2)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:43: AssertionError
____________________________ test_calculateTiles_2 ____________________________

>   ???
E   AssertionError: assert 'Not Possible' == 6
E    +  where 'Not Possible' = calculateTiles(4, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:46: AssertionError
____________________________ test_calculateTiles_3 ____________________________

>   ???
E   AssertionError: assert 'Not Possible' == 1
E    +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:50: AssertionError
____________________________ test_checkTilesFit_1 _____________________________

>   ???
E   assert False == True
E    +  where False = checkTilesFit(4, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:57: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_1 - AssertionError: assert 'Not ...
FAILED test_student.py::test_calculateTiles_2 - AssertionError: assert 'Not ...
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not ...
FAILED test_student.py::test_checkTilesFit_1 - assert False == True
======================== 4 failed, 16 passed in 0.23s =========================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                    [100%]

================================== FAILURES ===================================
____________________________ test_calculateTiles_4 ____________________________

>   ???
E   AssertionError: assert 4 == 'Not Possible'
E    +  where 4 = calculateTiles(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:53: AssertionError
____________________________ test_checkTilesFit_2 _____________________________

>   ???
E   assert True == False
E    +  where True = checkTilesFit(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:60: AssertionError
____________________________ test_checkTilesFit_3 _____________________________

>   ???
E   assert True == False
E    +  where True = checkTilesFit(4, 3, 2, 2)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:63: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == ...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================== 3 failed, 17 passed in 0.10s =========================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                    [100%]

================================== FAILURES ===================================
____________________________ test_calculateTiles_4 ____________________________

>   ???
E   AssertionError: assert 4 == 'Not Possible'
E    +  where 4 = calculateTiles(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:53: AssertionError
____________________________ test_checkTilesFit_2 _____________________________

>   ???
E   assert True == False
E    +  where True = checkTilesFit(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:60: AssertionError
____________________________ test_checkTilesFit_3 _____________________________

>   ???
E   assert True == False
E    +  where True = checkTilesFit(4, 3, 2, 2)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:63: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == ...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================== 3 failed, 17 passed in 0.10s =========================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.F..                                    [100%]

================================== FAILURES ===================================
____________________________ test_calculateTiles_4 ____________________________

>   ???
E   AssertionError: assert 4 == 'Not Possible'
E    +  where 4 = calculateTiles(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:53: AssertionError
____________________________ test_checkTilesFit_2 _____________________________

>   ???
E   assert True == False
E    +  where True = checkTilesFit(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:60: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == ...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
======================== 2 failed, 18 passed in 0.10s =========================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.FF.                                    [100%]

================================== FAILURES ===================================
____________________________ test_calculateTiles_4 ____________________________

>   ???
E   AssertionError: assert 4 == 'Not Possible'
E    +  where 4 = calculateTiles(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:53: AssertionError
____________________________ test_checkTilesFit_2 _____________________________

>   ???
E   assert True == False
E    +  where True = checkTilesFit(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:60: AssertionError
____________________________ test_checkTilesFit_3 _____________________________

>   ???
E   assert True == False
E    +  where True = checkTilesFit(4, 3, 2, 2)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:63: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == ...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
FAILED test_student.py::test_checkTilesFit_3 - assert True == False
======================== 3 failed, 17 passed in 0.22s =========================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ...............F.F..                                    [100%]

================================== FAILURES ===================================
____________________________ test_calculateTiles_4 ____________________________

>   ???
E   AssertionError: assert 4 == 'Not Possible'
E    +  where 4 = calculateTiles(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:53: AssertionError
____________________________ test_checkTilesFit_2 _____________________________

>   ???
E   assert True == False
E    +  where True = checkTilesFit(3, 3, 2, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:60: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_4 - AssertionError: assert 4 == ...
FAILED test_student.py::test_checkTilesFit_2 - assert True == False
======================== 2 failed, 18 passed in 0.10s =========================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..............F.....                                    [100%]

================================== FAILURES ===================================
____________________________ test_calculateTiles_3 ____________________________

>   ???
E   AssertionError: assert 'Not Possible' == 1
E    +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:50: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not ...
======================== 1 failed, 19 passed in 0.11s =========================
============================= test session starts =============================
platform linux -- Python 3.8.3, pytest-5.4.3, py-1.9.0, pluggy-0.13.1
rootdir: /home/muhammad/Desktop/My Files/TA task2/assignment14(1)
plugins: timeout-1.4.2
timeout: 3.0s
timeout method: signal
timeout func_only: False
collected 20 items

test_student.py ..............F.....                                    [100%]

================================== FAILURES ===================================
____________________________ test_calculateTiles_3 ____________________________

>   ???
E   AssertionError: assert 'Not Possible' == 1
E    +  where 'Not Possible' = calculateTiles(4, 3, 12, 1)

/home/muhammad/Desktop/TA task2/assignment14(1)/test_student.py:50: AssertionError
=========================== short test summary info ===========================
FAILED test_student.py::test_calculateTiles_3 - AssertionError: assert 'Not ...
======================== 1 failed, 19 passed in 0.10s =========================
